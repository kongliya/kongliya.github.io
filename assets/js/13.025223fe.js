(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{371:function(s,n,a){"use strict";a.r(n);var e=a(42),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"一些日常总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些日常总结"}},[s._v("#")]),s._v(" 一些日常总结")]),s._v(" "),a("h2",{attrs:{id:"动态获取浏览器宽高；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态获取浏览器宽高；"}},[s._v("#")]),s._v(" 动态获取浏览器宽高；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("mounted() {\n\t// 动态获取浏览器宽;\n\twindow.onresize = () => {\n\t\treturn (() => {\n\t\t\tthis.clientWidth = document.body.clientWidth;\n\t\t\tthis.computedScreenWidth();\n\t\t})();\n\t};\n},\ncomputedScreenWidth() {\n\tif (this.clientWidth < 1280) {\n\t\tthis.clientWidth = 1280;\n\t}\n\t// 会中布局16:9;\n\tthis.clientLeftWidth = this.clientWidth * (16 / 21.4);\n\tthis.clientLeftHeight = (9 * this.clientLeftWidth) / 16;\n\tthis.clientRightHeight = this.clientLeftHeight / 3;\n\tthis.clientRightWidth = this.clientRightHeight * (16 / 9);\n},\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"vue之中dom渲染完成后操作dom；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue之中dom渲染完成后操作dom；"}},[s._v("#")]),s._v(" vue之中DOM渲染完成后操作DOM；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t// DOM渲染完成后拿到要操作的DOM;\n\tthis.$nextTick(() => {\n\t\tvar lastVideoElementNum = document.getElementsByClassName('h26').length;\n\t\tif (lastVideoElementNum > 0) {\n\t\tvar lastVideoElement = document.getElementsByClassName('h26')[lastVideoElementNum - 1];\n\t\tlastVideoElement.style.borderBottom = '1px solid #fff';\n\t\t}\n\t})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"浏览器添加全局的提醒框；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器添加全局的提醒框；"}},[s._v("#")]),s._v(" 浏览器添加全局的提醒框；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tif(window.Notification) {\n\t\tvar notification = new Notification('你有一条新信息', {\n\t\t\tbody: \"显示的信息\",\n\t\t});\n\t\tsetTimeout(function() { notification.close(); }, 多少毫秒之后消失);\n\t}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"实现展开折叠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现展开折叠"}},[s._v("#")]),s._v(" 实现展开折叠;")]),s._v(" "),a("p",[s._v("因开发需要写几个页面，药品说明书页面，因为文案篇幅较长，所以添加了展开折叠功能。百度许久网上的帖子真的是一言难尽那，还好最后自己想到了一招。因为是几个静态页面，为了方便操DOM所以引进来了jq，虽然它很老，但是我不否认写原生页面操作DOM它简直是牛逼的一批。好了，不扯闲话了。上代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('html: \n<div class="normalName">\n\t<p class="title">孕妇提醒</p>\n\t<p class="con clip" id="tips">假装这是一段很长需要折叠的代码。</p>\n\t<p class="open">\n\t<span>展开</span><img src="assets/img/open.png" alt="">\n\t</p>\n\t<p class="close">\n\t<span>收起</span><img src="assets/img/close.png" alt="">\n\t</p>\n</div>\n\ncss: \n.normalName .con {\n    font-size: 0.15rem;\n    font-weight: 500;\n    color: rgba(41, 47, 56, 1);\n    line-height: 0.3rem;\n    padding-left: .1rem;\n    -webkit-box-orient: vertical;\n}\n\n.normalName .clip {\n    overflow: hidden;  // 超出部分隐藏;\n    text-overflow: ellipsis; // 显示三个点;\n    display: -webkit-box;\n    -webkit-line-clamp: 3;  // 显示几行;\n}\n\njs: \n// 判断行数是否需要显示展开按钮（为了适应不同手机的宽） 三行的高度是90;\n// 如果考虑到resize也可以单独写在一个方法里，监听resize事件调用即可很简单不赘述;（但是移动端一般不会有resize事件）\nif ($("#tips").removeClass("clip").height() <= 90) {\n\t$(".close").hide();\n\t$(".open").hide();\n} else {\n\t$(".close").hide();\n\t$("#tips").addClass("clip")\n\t$(".open").click(() => {\n\t\t$("#tips").removeClass("clip");\n\t\t$(".open").hide();\n\t\t$(".close").show();\n\t})\n\t$(".close").click(() => {\n\t\t$("#tips").addClass("clip");\n\t\t$(".close").hide();\n\t\t$(".open").show();\n\t})\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[s._v("是的，聪明人看代码就已经知道了实现方案==。"),a("br"),s._v("\n思路："),a("br"),s._v("\n判断是否需要动态添加.clip 即是否显示隐藏而出现三个点。如果行高大于90，我们则去显示展开按钮并且添加clip的class，点击展开则移除掉.clip正常显示，并显示收起按钮；若行高小于等于90，则我们展开收起按钮都无需显示。")]),s._v(" "),a("h2",{attrs:{id:"window-open父子传值："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-open父子传值："}},[s._v("#")]),s._v(" window.open父子传值：")]),s._v(" "),a("p",[s._v("父页面：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<p><input type="text" name="test1" id="usr" value="******"/></p>\n<p><input type="text" name="test2" id="pwd" value="**********"/></p>\n<button onclick="openWindow()">打开子页面</button>\n\nfunction openWindow() {\n\twindow.open("./2.html",\'newwindow\', \'height=100, width=400, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no\')\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("子页面：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<body>\n    父窗口带过来的用户名：<p id="son1"></p>\n    父窗口带过来的密码：<p id="son2"></p>\n</body>\n\ndocument.getElementById("son1").textContent = opener.document.getElementById("usr").value\ndocument.getElementById("son2").textContent = opener.document.getElementById("pwd").value\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"不知道的js系列之上篇；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不知道的js系列之上篇；"}},[s._v("#")]),s._v(" 不知道的js系列之上篇；")]),s._v(" "),a("h3",{attrs:{id:"_1-关于作用域："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关于作用域："}},[s._v("#")]),s._v(" 1. 关于作用域：")]),s._v(" "),a("ul",[a("li",[s._v("作用域是一套规则，用于确定在何处以及何时查找变量（标识符）。")]),s._v(" "),a("li",[s._v("如果查找的目的是对变量进行赋值，则会使用LHS查询/如果目的是为了获取变量的值，则会进行RHS查询。")]),s._v(" "),a("li",[s._v("赋值操作会导致LHS查询")]),s._v(" "),a("li",[s._v("不成功的RHS引用会导致抛出ReferenceError异常，不成功的LHS引用会导致自动隐式的创建一个全局变量（非严格模式），严格模式下抛出ReferenceError异常")]),s._v(" "),a("li",[s._v("词法作用域以为这作用域是由书写代码时函数声明的位置来决定的。编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对他们进行查找。")]),s._v(" "),a("li",[s._v("eval(...) 可以对一段包含一个或者多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在运行时）。")]),s._v(" "),a("li",[s._v("with 本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域（也是在运行时）。")]),s._v(" "),a("li",[s._v("以上两个机制的副作用是引擎无法在编译时对作用域查找进行优化。因为引擎只能谨慎的认为这样的优化是无效的。使用这俩中的任何一个都会使得代码运行变慢！！！")])]),s._v(" "),a("h3",{attrs:{id:"_2-函数作用域："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数作用域："}},[s._v("#")]),s._v(" 2. 函数作用域：")]),s._v(" "),a("ul",[a("li",[s._v("最小授权/最小暴露原则：私有化，学会函数封装;")]),s._v(" "),a("li",[s._v("规避冲突：1. 全局命名空间 2. 模块管理；")]),s._v(" "),a("li",[s._v("函数声明和函数表达式最重要的区别是他们的名称标识符将会绑定在何处；")])]),s._v(" "),a("h2",{attrs:{id:"关于两大module；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于两大module；"}},[s._v("#")]),s._v(" 关于两大module；")]),s._v(" "),a("h3",{attrs:{id:"_1-es6-module："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-es6-module："}},[s._v("#")]),s._v(" 1. ES6 module：")]),s._v(" "),a("ul",[a("li",[s._v("简称为ESM 使用关键字为export import；")]),s._v(" "),a("li",[s._v('若在<script>标签中，则需要声明 type="module" 代表是加载ES6模块 默认启用defer属性（代表全部加载完DOM后再执行此模块，另一个属性为async 表示若模块加载完立即执行 不用等DOM渲染完成 可能会中途阻止DOM渲染）；')]),s._v(" "),a("li",[s._v("导出的是值的引用，内部的变化会引起引用的值的变化；")]),s._v(" "),a("li",[s._v("自动采用严格模式，不管有没有声明 use strict；")]),s._v(" "),a("li",[s._v("模块之中，顶层的this返回undefined，不会指向window，所以顶层的this是无意义的（感觉是个闭包的亚子）；")]),s._v(" "),a("li",[s._v("同一个模块若加载多次，只执行一次。")])]),s._v(" "),a("h3",{attrs:{id:"_2-commonjs："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-commonjs："}},[s._v("#")]),s._v(" 2. CommonJS：")]),s._v(" "),a("ul",[a("li",[s._v("简称为CJS，使用关键字为require() module export()...;")]),s._v(" "),a("li",[s._v("导出的是一个值的拷贝，内部变化不影响引用的值；")])]),s._v(" "),a("h3",{attrs:{id:"_3-代码解释什么叫值的拷贝和引用："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码解释什么叫值的拷贝和引用："}},[s._v("#")]),s._v(" 3. 代码解释什么叫值的拷贝和引用：")]),s._v(" "),a("p",[s._v("CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// main.js\nvar mod = require('./lib');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  incCounter: incCounter,\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ node main.js\n3\n4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。")]),s._v(" "),a("p",[s._v("还是举上面的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// lib.js\nexport let counter = 3;\nexport function incCounter() {\n  counter++;\n}\n\n// main.js\nimport { counter, incCounter } from './lib';\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码说明，ES6 模块输入的变量counter是活的，完全反应其所在模块lib.js内部的变化。")]),s._v(" "),a("p",[s._v("再举一个出现在export一节中的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// m1.js\nexport var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n\n// m2.js\nimport {foo} from './m1.js';\nconsole.log(foo);\nsetTimeout(() => console.log(foo), 500);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，m1.js的变量foo，在刚加载时等于bar，过了 500 毫秒，又变为等于baz。")]),s._v(" "),a("p",[s._v("让我们看看，m2.js能否正确读取这个变化。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ babel-node m2.js\n\nbar\nbaz\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。")]),s._v(" "),a("p",[s._v("由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// lib.js\nexport let obj = {};\n\n// main.js\nimport { obj } from './lib';\n\nobj.prop = 123; // OK\nobj = {}; // TypeError\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，main.js从lib.js输入变量obj，可以对obj添加属性，但是重新赋值就会报错。因为变量obj指向的地址是只读的，不能重新赋值，这就好比main.js创造了一个名为obj的const变量。")]),s._v(" "),a("p",[s._v("最后，export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// mod.js\nfunction C() {\n  this.sum = 0;\n  this.add = function () {\n    this.sum += 1;\n  };\n  this.show = function () {\n    console.log(this.sum);\n  };\n}\n\nexport let c = new C();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("上面的脚本mod.js，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// x.js\nimport {c} from './mod';\nc.add();\n\n// y.js\nimport {c} from './mod';\nc.show();\n\n// main.js\nimport './x';\nimport './y';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("现在执行main.js，输出的是1。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ babel-node main.js\n1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这就证明了x.js和y.js加载的都是C的同一个实例。")]),s._v(" "),a("h2",{attrs:{id:"javascript-侦测手机浏览器的五种方法；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-侦测手机浏览器的五种方法；"}},[s._v("#")]),s._v(" JavaScript 侦测手机浏览器的五种方法；")]),s._v(" "),a("h3",{attrs:{id:"一、navigator-useragent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、navigator-useragent"}},[s._v("#")]),s._v(" 一、navigator.userAgent")]),s._v(" "),a("p",[s._v("最简单的方法就是分析浏览器的 user agent 字符串，它包含了设备信息。")]),s._v(" "),a("p",[s._v("JS 通过navigator.userAgent属性拿到这个字符串，只要里面包含mobi、android、iphone等关键字，就可以认定是移动设备。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (/Mobi|Android|iPhone/i.test(navigator.userAgent)) {\n  // 当前设备是移动设备\n}\n\n// 另一种写法\nif (\n  navigator.userAgent.match(/Mobi/i) ||\n  navigator.userAgent.match(/Android/i) ||\n  navigator.userAgent.match(/iPhone/i)\n) {\n  // 当前设备是移动设备\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这种方法的优点是简单方便，缺点是不可靠，因为用户可以修改这个字符串，让手机浏览器伪装成桌面浏览器。")]),s._v(" "),a("p",[s._v("Chromium 系的浏览器，还有一个navigator.userAgentData属性，也是类似的作用。不同之处是它将 user agent 字符串解析为一个对象，该对象的mobile属性，返回一个布尔值，表示用户是否使用移动设备。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const isMobile = navigator.userAgentData.mobile; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意，苹果的 Safari 浏览器和 Firefox 浏览器都不支持这个属性，具体情况可以查看 Caniuse 网站。")]),s._v(" "),a("p",[s._v("此外，还有一个已经废除的navigator.platform属性，所有浏览器都支持，所以也可以用。它返回一个字符串，表示用户的操作系统。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (/Android|iPhone|iPad|iPod/i.test(navigator.platform)) {\n  // 当前设备是移动设备\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"二、window-screen，window-innerwidth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、window-screen，window-innerwidth"}},[s._v("#")]),s._v(" 二、window.screen，window.innerWidth")]),s._v(" "),a("p",[s._v("另一种方法是通过屏幕宽度，判断是否为手机。")]),s._v(" "),a("p",[s._v("window.screen对象返回用户设备的屏幕信息，该对象的width属性是屏幕宽度（单位为像素）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (window.screen.width < 500) {\n  // 当前设备是移动设备 \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面示例中，如果屏幕宽度window.screen.width小于500像素，就认为是手机。")]),s._v(" "),a("p",[s._v("这个方法的缺点在于，如果手机横屏使用，就识别不了。")]),s._v(" "),a("p",[s._v("另一个属性window.innerWidth返回浏览器窗口里面的网页可见部分的宽度，比较适合指定网页在不同宽度下的样式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const getBrowserWidth = function() {\n  if (window.innerWidth < 768) {\n    return "xs";\n  } else if (window.innerWidth < 991) {\n    return "sm";\n  } else if (window.innerWidth < 1199) {\n    return "md";\n  } else {\n    return "lg";\n  }\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"三、window-orientation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、window-orientation"}},[s._v("#")]),s._v(" 三、window.orientation")]),s._v(" "),a("p",[s._v("第三种方法是侦测屏幕方向，手机屏幕可以随时改变方向（横屏或竖屏），桌面设备做不到。")]),s._v(" "),a("p",[s._v("window.orientation属性用于获取屏幕的当前方向，只有移动设备才有这个属性，桌面设备会返回undefined。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (typeof window.orientation !== 'undefined') {\n  // 当前设备是移动设备 \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意，iPhone 的 Safari 浏览器不支持该属性。")]),s._v(" "),a("h3",{attrs:{id:"四、touch-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、touch-事件"}},[s._v("#")]),s._v(" 四、touch 事件")]),s._v(" "),a("p",[s._v("第四种方法是，手机浏览器的 DOM 元素可以通过ontouchstart属性，为touch事件指定监听函数。桌面设备没有这个属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function isMobile() { \n  return ('ontouchstart' in document.documentElement); \n}\n\n// 另一种写法\nfunction isMobile() {\n  try {\n    document.createEvent(\"TouchEvent\"); return true;\n  } catch(e) {\n    return false; \n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"五、window-matchmedia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、window-matchmedia"}},[s._v("#")]),s._v(" 五、window.matchMedia()")]),s._v(" "),a("p",[s._v("最后一种方法是结合 CSS 来判断。")]),s._v(" "),a("p",[s._v("CSS 通过 media query（媒介查询）为网页指定响应式样式。如果某个针对手机的 media query 语句生效了，就可以认为当前设备是移动设备。")]),s._v(" "),a("p",[s._v("window.matchMedia()方法接受一个 CSS 的 media query 语句作为参数，判断这个语句是否生效。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let isMobile = window.matchMedia("only screen and (max-width: 760px)").matches;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面示例中，window.matchMedia()的参数是一个 CSS 查询语句，表示只对屏幕宽度不超过 700 像素的设备生效。它返回一个对象，该对象的matches属性是一个布尔值。如果是true，就表示查询生效，当前设备是手机。")]),s._v(" "),a("p",[s._v("除了通过屏幕宽度判断，还可以通过指针的精确性判断。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let isMobile = window.matchMedia("(pointer:coarse)").matches;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面示例中，CSS 语句pointer:coarse表示当前设备的指针是不精确的。由于手机不支持鼠标，只支持触摸，所以符合这个条件。")]),s._v(" "),a("p",[s._v("有些设备支持多种指针，比如同时支持鼠标和触摸。pointer:coarse只用来判断主指针，此外还有一个any-pointer命令判断所有指针。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let isMobile = window.matchMedia("(any-pointer:coarse)").matches;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面示例中，any-pointer:coarse表示所有指针里面，只要有一个指针是不精确的，就符合查询条件。")]),s._v(" "),a("h3",{attrs:{id:"六、工具包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、工具包"}},[s._v("#")]),s._v(" 六、工具包")]),s._v(" "),a("p",[s._v("除了上面这些方法，也可以使用别人写好的工具包。这里推荐 react-device-detect，它支持多种粒度的设备侦测。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import {isMobile} from 'react-device-detect';\n\nif (isMobile) {\n  // 当前设备是移动设备\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"导出导入文件代码实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出导入文件代码实例"}},[s._v("#")]),s._v(" 导出导入文件代码实例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// ==== 导出相关;\n// get接口导出;\nexport const ApiParamExport = (id: number): Promise<Response> =>\n  api.get(`xxx/xxx/xxx/${id}`, {\n    responseType: "blob",\n  });\n// post接口导出; \nexport const ApiMedicineExport = (params: any): Promise<Response> =>\n  api.post("xxx/export", params, { responseType: "blob" });\n\n// 返回文件流后对文件流进行处理下载;\nApiParamExport(this.questionnaireId).then((res) => {\n  const datetime = moment(new Date().getTime()).format("YYYY-MM-DD");\n  const objUrl = URL.createObjectURL(res);\n  const a = document.createElement("a");\n  a.href = objUrl;\n  a.download = "paramsData_" + datetime + ".xlsx";\n  document.body.appendChild(a);\n  a.click();\n  a.remove();\n  this.exportLoading = false; // 导出按钮避免重复点击添加loading...\n  this.$message.success("导出成功！");\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// ==== 导入相关;\n// post接口导入; \nexport const ApiMedicineImport = (params: any): Promise<Response> =>\n  api.post("xxxx/import", params, {\n    headers: { "Content-Type": "multipart/form-data" },\n  });\n//导入ele示例;\n<el-upload\n  class="upload-demo"\n  action=""\n  :http-request="importMedicineOrder"\n  :on-success="handleSuccess"\n  :file-list="fileList"\n  :show-file-list="false"\n  accept=".xls, .xlsx"\n>\n  <el-button type="primary">导 入</el-button>\n</el-upload>\n// 导入接口调用;\nimportMedicineOrder(file: any) {\n  // 导入;\n  const formData = new FormData();\n  formData.append("excel", file.file);\n  ApiMedicineImport(formData).then((res) => {\n    this.fileList = [];\n    this.expressInfoLists = res.data;\n    // 其他业务逻辑处理;\n  });\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h2",{attrs:{id:"作用域提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域提升"}},[s._v("#")]),s._v(" 作用域提升")]),s._v(" "),a("ul",[a("li",[s._v("ES3开始 try/catch结构在catch中具有块级作用域")]),s._v(" "),a("li",[s._v("作用域提升便 移到各自作用域的最顶端；")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = 2;\n// 等价于\nvar a; // 编译阶段的任务;\na = 2; // 执行阶段的任务;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("函数优先被提升，其次才是变量;\n例如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("foo();  // 1\nvar foo;\nfunction foo(){\n  console.log(1);\n}\nfoo = function() {\n  console.log(2);\n}\n\n// 提升后;\nfunction foo() {\n  console.log(1);\n} // 因为foo被重复定义 所以后定义的fun覆盖前边的var foo;\nfoo(); // 1\nfoo = function() {\n  console.log(2);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("总结：无论作用域中的声明出现在什么地方，都将在代码被执行前首先进行处理。可以将这个过程理解为所有的声明（函数和变量）都会被“移动”到各自作用域的最顶端，这个过程称为提升。")])]),s._v(" "),a("h2",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[s._v("#")]),s._v(" 模块")]),s._v(" "),a("ul",[a("li",[s._v("模块暴露：涵盖模块实例内部作用域的闭包；")]),s._v(" "),a("li",[s._v("模块模式的两个必要条件：")])]),s._v(" "),a("ol",[a("li",[s._v("必须有外部的封闭函数，至少被调用一次，每次调用都会创建一个新的模块实例；")]),s._v(" "),a("li",[s._v("必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。")])]),s._v(" "),a("h2",{attrs:{id:"关于this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于this"}},[s._v("#")]),s._v(" 关于this")]),s._v(" "),a("ul",[a("li",[s._v("this提供了一种更优雅的方式来隐式“传递”一个对象引用，这样可以将API设置的简洁并于易于复用；")]),s._v(" "),a("li",[s._v("调用栈：相当于一个函数调用链 在哪里被调用；")]),s._v(" "),a("li",[s._v("绑定规则：\n"),a("ul",[a("li",[s._v("默认绑定：独立函数调用 this指向全局对象 或者说 指向window（严格模式下指向undefined）；")]),s._v(" "),a("li",[s._v("隐式绑定：会将函数调用中的this绑定到这个上下文对象；\n"),a("ul",[a("li",[s._v("隐式丢失： 被隐式绑定的函数会丢失绑定对象，也就是它应用默认绑定规则，从而把this绑定到全局对象或者undefined上，取决于是否为严格模式。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 一个简单的例子;\nfunction foo(){\n  console.log(this.a); // 实际上引用了全局对象的a;\n}\nvar baz = {\n  a : 1,\n  obj: foo\n}\nvar bar = baz.obj; // 别名 实际上还是指向了foo本身...\nvar a = 'oops'; // 全局对象的属性\nbar();  // 'oops' \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[s._v("显式绑定：call、apply方式直接指定this的绑定对象;\n"),a("ul",[a("li",[s._v("硬绑定：创建一个包裹函数，负责接收参数并返回值；ES5提供了内置方法：Function.prototype.bind;")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(some) {\n  console.log(this.a,some);\n  return this.a + some;\n}\nvar obj = {\n  a: 2,\n};\nvar bar = foo.bind(obj);\nvar b = bar(3); // 2 3;\nconsole.log(b); // 5;\n// bind(..)会返回一个硬编码的新函数，它会把你置顶的参数设置为this的上下文并调用原始函数;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("new绑定：使用new来调用函数，或者说发生构造函数调用时，会自动执行如下操作：")])]),s._v(" "),a("ol",[a("li",[s._v("创建/构造一个全新的对象；")]),s._v(" "),a("li",[s._v("这个新对象会被执行[[prototype]]链接；")]),s._v(" "),a("li",[s._v("这个新对象会绑定到函数调用的this；")]),s._v(" "),a("li",[s._v("如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。")])])]),s._v(" "),a("li",[s._v("优先级：\n（一个额外的知识：polyfill代码用于对旧浏览器的兼容）\n显式绑定>隐式绑定 new绑定>硬绑定")])])])]),s._v(" "),a("h2",{attrs:{id:"判断数组包含的对象是否全部都在另一个数组集合中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组包含的对象是否全部都在另一个数组集合中"}},[s._v("#")]),s._v(" 判断数组包含的对象是否全部都在另一个数组集合中;")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("isIncludeArr(all, someCon) {\n  return someCon.every((item) => {\n    return all.some((sub) => {\n      return sub === item;\n    });\n  });\n},\n\nconst arr11 = [9, 10, 11, 12, 13, 1, 2, 3, 4, 5]; \nconst arr22 = [9, 10, 11, 12, 13]; \nconst arr33 = [9, 10, 100];\nconsole.log(isInclude(arr11, arr22));  //true\nconsole.log(isInclude(arr11, arr33));  //false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"判断数组中是否至少有一项存在"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组中是否至少有一项存在"}},[s._v("#")]),s._v(" 判断数组中是否至少有一项存在")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("isIncludeSomeArr(all, someCon) {\n  return all.some((item) => {\n    return someCon.some((sub) => {\n      return sub === item;\n    });\n  });\n},\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);